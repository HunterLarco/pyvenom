#!/usr/bin/env python

import argparse
import sys
from argparse import ArgumentTypeError
import os
import shutil


def copytree(src, dst, symlinks=False, ignore=None, template=None):
  template = template if template else {}
  for item in os.listdir(src):
    s = os.path.join(src, item)
    d = os.path.join(dst, item)
    if os.path.isdir(s):
      copytree(s, d, symlinks, ignore)
    else:
      s_file = open(s, 'r')
      s_value = s_file.read()
      s_file.close()
      
      for key, value in template.items():
        s_value = s_value.replace('{{{{ {} }}}}'.format(key), value)
      
      d_file = open(d, 'w+')
      d_file.write(s_value)
      d_file.close()

      # shutil.copy2(s, d)


class VenomCLI(object):
  def __init__(self):
    parser = argparse.ArgumentParser(
      description='Venom command line tool',
      usage='''venom <command> [<args>]

The most commonly used venom commands are:
   create   Create a new pyvenom project
''')
    parser.add_argument('command', help='Subcommand to run')
    # parse_args defaults to [1:] for args, but you need to
    # exclude the rest of the args too, or validation will fail
    args = parser.parse_args(sys.argv[1:2])
    if not hasattr(self, args.command):
      print 'Unrecognized command'
      parser.print_help()
      exit(1)
    # use dispatch pattern to invoke method with same name
    getattr(self, args.command)()

  def create(self):
    parser = argparse.ArgumentParser(description='Create a new venom project')
    # prefixing the argument with -- means it's optional
    parser.add_argument('dir', help='The directory in which to create a new pyvenom project')
    parser.add_argument('-s', '--source', help='The source directory for creation boilerplate', default=None, action='store')
    parser.add_argument('-a', '--application', help='The Google App Engine application ID', default=None, action='store')
    # now that we're inside a subcommand, ignore the first
    # TWO argvs, ie the command (git) and the subcommand (commit)
    args = parser.parse_args(sys.argv[2:])
    # create a new project
    dir_path = os.path.abspath(args.dir)
    dir_exists = os.path.exists(dir_path)
    if dir_exists:
      if not os.path.isdir(dir_path):
        raise ArgumentTypeError('path is not a directory: \'{}\''.format(args.dir))
    else:
      os.makedirs(dir_path)
    
    if args.source:
      source_path = os.path.abspath(args.source)
    else:
      cli_dir = os.path.dirname(os.path.realpath(__file__))
      source_path = os.path.abspath(os.path.join(cli_dir, 'boilerplate'))
    
    copytree(source_path, dir_path, template={
      'application':
        args.application
        if args.application else
        os.path.basename(os.path.normpath(dir_path))
    })
    print 'DONE'
  
  def start(self):
    parser = argparse.ArgumentParser(description='Run a venom server')
    parser.add_argument('dir', help='pyvenom server directory', default='.', action='store', nargs='?')
    args = parser.parse_args(sys.argv[2:])
    
    dir_path = os.path.abspath(args.dir)
    os.system('dev_appserver.py "{}"'.format(dir_path))


if __name__ == '__main__':
  VenomCLI()
